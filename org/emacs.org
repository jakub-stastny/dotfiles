#+TITLE: Emacs configuration file
#+AUTHOR: Jakub Šťastný
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el :mkdirp yes

* About

My minimalistic Emacs configuration. Concerns that are not part of the core are addressed in environments.

* Native comp

Set it early in your init file so all future packages benefit from async compilation.

Unlike =elc= files, the =eln= files are stored in =~/.emacs.d/eln-cache=.

#+begin_src emacs-lisp
  (setq comp-deferred-compilation t)
#+end_src

* Managing this configuration

** Variables

#+begin_src emacs-lisp
  (setq my/emacs-config-path (expand-file-name "~/org/emacs.org"))
#+end_src

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
#+end_src

** Tangle on save

The =init.el= should (after the first run) mirror the source blocks in the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts the code blocks from the current file into a source-specific file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to the =after-save-hook= ensuring to always tangle and byte-compile the =org=-document after changes.

#+begin_src emacs-lisp
  (defun my/emacs/tangle-hook ()
    "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name) my/emacs-config-path)
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'my/emacs/tangle-hook)
#+end_src

** Tangle on save

The =init.el= should (after the first run) mirror the source blocks in the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts the code blocks from the current file into a source-specific file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to the =after-save-hook= ensuring to always tangle and byte-compile the =org=-document after changes.

#+begin_src emacs-lisp
  (defun my/emacs/reload-hook ()
    "If the current buffer is 'init.org' the code-blocks are
    reloaded, and the reloaded file is compiled."
    (when (equal (buffer-file-name) my/emacs-config-path)
      (load-file (concat user-emacs-directory "init.el"))))

  (add-hook 'after-save-hook 'my/emacs/reload-hook)
#+end_src

* Configuration
** Leaf

Alternative to =use-package= that actually works.

=package-refresh-contents=

#+begin_src emacs-lisp
  (eval-and-compile
    (customize-set-variable
    'package-archives '(("org" . "https://orgmode.org/elpa/")
                        ("melpa" . "https://melpa.org/packages/")
                        ("gnu" . "https://elpa.gnu.org/packages/")))

    (package-initialize)

    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      ;; :init
      :config
        ;; initialize leaf-keywords.el
        (leaf-keywords-init)))
#+end_src

** Do not show warnings buffer on startup with warnings

This is important, otherwise it starts in a split mode talking about all the wank it doesn't like.
https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Basics.html

#+begin_src emacs-lisp
  (setq warning-minimum-level :error)

  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
#+end_src

** EVIL and EVIL collection

[[https://github.com/emacs-evil/evil-collection][Package evil-collection]]

Support for Evil mode movement in 3rd party packages, such as Magit.

#+begin_src emacs-lisp
  (leaf evil
    :ensure t
    ;; :init
    ;;   (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    ;;   (setq evil-want-keybinding nil)
    :config
      (evil-mode 1)
      (evil-ex-define-cmd "ls" 'ibuffer))

  (leaf evil-commentary
    :ensure t
    :config
      (evil-commentary-mode))

  (leaf evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  ;; THIS BREAKS LISPY (d command deletes rather than lispy-different).
  ;; https://github.com/emacs-evil/evil-collection/issues/116
  ;; (leaf evil-collection
  ;;   :after evil
  ;;   :ensure t
  ;;   :config
  ;;     (evil-collection-init))
#+end_src

*** EVIL and Org mode

Enable tab cycling in org mode in the evil normal mode.

#+begin_src emacs-lisp
;(define-key evil-normal-state-map (kbd "tab") 'org-cycle)
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "TAB") 'org-cycle))
#+end_src

** Key chord
#+begin_src emacs-lisp
  (leaf key-chord
        :after evil
        :ensure t
        :config
          (key-chord-mode 1)

  ; https://www.emacswiki.org/emacs/KeyChord
  ; Max time delay between two presses of the same key to be considered a key chord.
	;; Should normally be a little longer than `key-chord-two-keys-delay'.
	(setq key-chord-one-key-delay 0.3) ; default 0.2

  ;(key-chord-define evil-normal-state-map "jj" 'evil-force-normal-state)
  (key-chord-define evil-visual-state-map "jj" 'evil-change-to-previous-state)
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-define evil-replace-state-map "jj" 'evil-normal-state))
#+end_src

** Helm

#+begin_src emacs-lisp
(leaf helm
	:ensure t
	:config
    ;(require 'helm-config)
    (helm-mode 1))
#+end_src

** Disabling default behaviours

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Line numbers & indentation

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)

  (global-display-line-numbers-mode)

  (visual-line-mode t) ; soft wrap
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src

** Editor config

#+begin_src emacs-lisp
  (leaf editorconfig
    :ensure t
    :config
      (editorconfig-mode 1))
#+end_src

** Search & regular expressions

https://www.gnu.org/software/emacs/manual/html_node/efaq/Controlling-case-sensitivity.html

#+begin_src emacs-lisp
  (setq case-fold-search nil) ; make searches case sensitive %s
#+end_src

** Backup files

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs-backups")))
#+end_src

* Org mode

** Do not indent after headings

https://www.reddit.com/r/orgmode/comments/npxghq/how_to_change_automatic_indentation_and/

#+begin_src emacs-lisp
  (setq org-adapt-indentation nil)
#+end_src

** Easy templates

https://www.reddit.com/r/emacs/comments/ad68zk/get_easytemplates_back_in_orgmode_92/

=<s tab= to expand to a code block.

It's good that is so easy to keep things working as you're used to, but you might also want to give the new mechanism a shot. The command org-insert-structure-template bound to C-c C-, gives you a list of possible #begin_/#end_ pairs to insert, that narrows down interactively while you type. It's fast, convenient and you don't have to have the trigger memorized before hand as with <trigger TAB.

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Don't ask confirmation for C-c C-c.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** C-c ' opens in a full-screen view

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

** The rest

#+begin_src emacs-lisp
; Interesting pkg https://www.emacswiki.org/emacs/FillColumnIndicator
;(setq fci-rule-width 1)
;(setq fci-rule-color "darkblue")

; https://www.emacswiki.org/emacs/VisualLineMode
; https://www.emacswiki.org/emacs/VisualFillColumn

(defun clear-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
#+end_src

#+begin_src emacs-lisp
  ;; (setq
  ;;   erc-nick "jakub-stastny"     ; Our IRC nick
  ;;   erc-user-full-name "Jakub Stastny") ; Our /whois name

  ;; ;; Define a function to connect to a server
  ;; (defun libera ()
  ;;   (interactive)
  ;;   (lambda ()
  ;;   (erc :server "irc.libera.chat"
  ;;        :port   "6697")))
#+end_src

** Open HTTP links in EWW

#+begin_src emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src

** [[https://magit.vc][Magit]]

Use =C-x g= to enter the mode.

** Lispy & Lispyville

Enable Lispy when Lisp is being edited.

#+begin_src emacs-lisp
  (add-hook 'lispy-mode-hook #'lispyville-mode)
  (add-hook 'lispy-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'lispy-mode-hook #'highlight-parentheses-mode)

  (add-hook 'clojure-mode-hook #'lispy-mode)
  (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
  (add-hook 'lisp-mode-hook #'lispy-mode)
#+end_src

With Emacs 27 comes the display-fill-column-indicator-mode minor mode, which obsoletes the fill-column-indicator package. You can add:

#+begin_src emacs-lisp
  (require 'display-fill-column-indicator)
  (add-hook 'prog-mode-hook (lambda () (display-fill-column-indicator-mode)))
  (setq display-fill-column-indicator-column 85) ; 85 characters per line

  ; Use [[/]] to navigate between previous/next sexp. TODO: Do in a hook.
  ; Might not be necessary, lispyville does that in normal mode with only one paren.
  (key-chord-define evil-insert-state-map "]]" 'lispy-forward)
  (key-chord-define evil-insert-state-map "[[" 'lispy-backward)

  (load-theme 'modus-vivendi)

  (defun start-bb-repl () (interactive) (start-process "Babashka REPL" "Babashka REPL" "bb" "--nrepl-server" "1667"))
#+end_src
