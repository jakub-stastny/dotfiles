#+TITLE: Emacs configuration file
#+AUTHOR: Jakub Šťastný
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

*** [[https://magit.vc][Magit]]

Use =C-x g= to enter the mode.
* About

My Emacs configuration. It's trying to be as minimalist as possible, leaving environment-specific concerns to =dir-locals.el=.

* Managing this configuration

** Tangle on save

The =init.el= should (after the first run) mirror the source blocks in the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts the code blocks from the current file into a source-specific file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to the =after-save-hook= ensuring to always tangle and byte-compile the =org=-document after changes.

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

** Reload configuration

Use =M-x reload= to reload the configuration.

#+BEGIN_SRC emacs-lisp
(defun reload ()
  "Reloads Emacs configuration."
  (interactive)
  (load-file "~/.emacs.d/init.elc"))
#+END_SRC

* Packages
** Package repositories

Set up Emacs package repositories.

#+BEGIN_SRC emacs-lisp
(require 'package)

(package-initialize)

(setq package-archives
        '(( "ELPA" . "https://elpa.gnu.org/packages/")
          ("MELPA" . "https://melpa.org/packages/"))
      package-archive-priorities
        '(("MELPA" . 5)
          ( "ELPA" . 0)))

(package-refresh-contents)
#+END_SRC

** EVIL

#+BEGIN_SRC emacs-lisp
(evil-mode 1)
(evil-commentary-mode)
(key-chord-mode 1)

(key-chord-define evil-normal-state-map "jj" 'evil-force-normal-state)
(key-chord-define evil-visual-state-map "jj" 'evil-change-to-previous-state)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-define evil-replace-state-map "jj" 'evil-normal-state)
#+END_SRC

*** EVIL and Org mode

Enable tab cycling in org mode in the evil normal mode.

#+BEGIN_SRC emacs-lisp
;(define-key evil-normal-state-map (kbd "tab") 'org-cycle)
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "TAB") 'org-cycle))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(require 'helm-config)

(helm-mode 1)
#+END_SRC

; Support for Evil mode movement in 3rd party packages, such as Magit.

#+BEGIN_SRC emacs-lisp
(evil-collection-init)
#+END_SRC


** [[https://github.com/emacs-evil/evil-collection][Package evil-collection]]

Magit buffers don't support Vim movement keys (=hjkl=) by default, which is what the =evil-collection= package is about.

It supports other common packages, not only Magit.

*** [[https://magit.vc][Magit]]

Use =C-x g= to enter the mode.
* Configuration
** Disabling default behaviours

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

** Line numbers & indentation

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

(global-display-line-numbers-mode)

(visual-line-mode t) ; soft wrap
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

** EditorConfig

#+BEGIN_SRC emacs-lisp
(editorconfig-mode 1)
#+END_SRC

** Search & regular expressions

https://www.gnu.org/software/emacs/manual/html_node/efaq/Controlling-case-sensitivity.html

#+BEGIN_SRC emacs-lisp
(setq case-fold-search nil) ; make searches case sensitive %s
#+END_SRC

** Backup files

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs-backups")))
#+END_SRC

** The rest

#+BEGIN_SRC emacs-lisp
; Interesting pkg https://www.emacswiki.org/emacs/FillColumnIndicator
;(setq fci-rule-width 1)
;(setq fci-rule-color "darkblue")

; https://www.emacswiki.org/emacs/VisualLineMode
; https://www.emacswiki.org/emacs/VisualFillColumn
(set-fill-column 120)

(defun clear-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (setq
  ;;   erc-nick "jakub-stastny"     ; Our IRC nick
  ;;   erc-user-full-name "Jakub Stastny") ; Our /whois name

  ;; ;; Define a function to connect to a server
  ;; (defun libera ()
  ;;   (interactive)
  ;;   (lambda ()
  ;;   (erc :server "irc.libera.chat"
  ;;        :port   "6697")))
#+END_SRC

* Org mode

** Do not indent after headings

https://www.reddit.com/r/orgmode/comments/npxghq/how_to_change_automatic_indentation_and/

#+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation nil)
#+END_SRC

** Open HTTP links in EWW

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

** Easy templates

https://www.reddit.com/r/emacs/comments/ad68zk/get_easytemplates_back_in_orgmode_92/

=<s tab= to expand to a code block.

It's good that is so easy to keep things working as you're used to, but you might also want to give the new mechanism a shot. The command org-insert-structure-template bound to C-c C-, gives you a list of possible #begin_/#end_ pairs to insert, that narrows down interactively while you type. It's fast, convenient and you don't have to have the trigger memorized before hand as with <trigger TAB.

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Don't ask confirmation for C-c C-c.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** C-c ' opens in a full-screen view

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src
