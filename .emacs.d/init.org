#+TITLE: Emacs configuration file
#+AUTHOR: Jakub Šťastný
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About

My Emacs configuration. It's trying to be as minimalist as possible, leaving environment-specific concerns to =dir-locals.el=.

* Managing this configuration

** Tangle on save

The =init.el= should (after the first run) mirror the source blocks in
the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
extracts the code blocks from the current file into a source-specific
file (in this case a =.el=-file).

To avoid doing this each time a change is made we can add a function to
the =after-save-hook= ensuring to always tangle and byte-compile the
=org=-document after changes.

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

** Reload configuration

Use =M-x reload= to reload the configuration.

#+BEGIN_SRC emacs-lisp
(defun reload ()
  "Reloads Emacs configuration."
  (interactive)
  (load-file "~/.emacs.d/init.elc"))
#+END_SRC

* Packages

Managing extensions for Emacs is simplified using =package= which is
built in to Emacs 24 and newer. To load downloaded packages we need to
initialize =package=. =cl= is a library that contains many functions from
Common Lisp, and comes in handy quite often, so we want to make sure it's
loaded, along with =package=, which is obviously needed.

#+BEGIN_SRC emacs-lisp
(require 'package)
;(package-initialize)
#+END_SRC

Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
archive and is well maintained.

#+BEGIN_SRC emacs-lisp
(setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
        ("MELPA" . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("MELPA" . 5)
        ("gnu" . 0)))
#+END_SRC

The configuration assumes that the packages listed below are
installed. To ensure we install missing packages if they are missing.

#+BEGIN_SRC emacs-lisp
(let* ((package--builtins nil)
        (packages
        '(auto-compile         ; automatically compile Emacs Lisp libraries

    ox-twbs ; org mode bootstrap export

    ; https://www.emacswiki.org/emacs/Evil
    evil
    evil-surround
    ;evil-number ; Vim-like increment/decrement. Doesn't seem to find the package.
    evil-commentary
    org-evil
    dash
    monitor
    elm-mode
            key-chord)))
(let ((packages (seq-remove 'package-installed-p packages)))
    (print packages)
    (when packages
        ;; Install uninstalled packages
        (package-refresh-contents)
        (mapc 'package-install packages))))

(evil-mode 1)
(evil-commentary-mode)
(key-chord-mode 1)



(key-chord-define evil-normal-state-map "jj" 'evil-force-normal-state)
(key-chord-define evil-visual-state-map "jj" 'evil-change-to-previous-state)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-define evil-replace-state-map "jj" 'evil-normal-state)

; Enable tab cycling in org mode in the evil normal mode.
;(define-key evil-normal-state-map (kbd "tab") 'org-cycle)
(with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "TAB") 'org-cycle))

; Disable the tool bar.
(menu-bar-mode -1)
(tool-bar-mode -1)

;(setq org-startup-indented t)
;(with-eval-after-load 'evil-maps
(visual-line-mode t);) ; soft wrap
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

; Interesting pkg https://www.emacswiki.org/emacs/FillColumnIndicator
;(setq fci-rule-width 1)
;(setq fci-rule-color "darkblue")

; https://www.emacswiki.org/emacs/VisualLineMode
; https://www.emacswiki.org/emacs/VisualFillColumn
(set-fill-column 120)

; Backup files
(setq backup-directory-alist `(("." . "~/.emacs-backups")))

; Indentation
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

; Line nums
(global-display-line-numbers-mode)

; https://www.gnu.org/software/emacs/manual/html_node/efaq/Controlling-case-sensitivity.html
(setq case-fold-search nil) ; make searches case sensitive %s

#+END_SRC

;;; C-c as general purpose escape key sequence.
;;;
#BEGIN_comment
(defun my-esc (prompt)
    "Functionality for escaping generally.  Includes exiting Evil insert state and C-g binding. "
    (cond
    ;; If we're in one of the Evil states that defines [escape] key, return [escape] so as
    ;; Key Lookup will use it.
    ((or (evil-insert-state-p) (evil-normal-state-p) (evil-replace-state-p) (evil-visual-state-p)) [escape])
    ;; This is the best way I could infer for now to have C-c work during evil-read-key.
    ;; Note: As long as I return [escape] in normal-state, I don't need this.
    ;;((eq overriding-terminal-local-map evil-read-key-map) (keyboard-quit) (kbd ""))
    (t (kbd "C-g"))))
(define-key key-translation-map (kbd "C-c") 'my-esc)
;; Works around the fact that Evil uses read-event directly when in operator state, which
;; doesn't use the key-translation-map.
(define-key evil-operator-state-map (kbd "C-c") 'keyboard-quit)
;; Not sure what behavior this changes, but might as well set it, seeing the Elisp manual's
;; documentation of it.
;(set-quit-char "C-c")
#END_comment

** Custom variables

If you edit through Emacs, it will write the set custom variables
to ~/.emacs and it won't work right, there should be always only
1 custom-set-variables block.

https://linuxhint.com/emacs_themes/

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(custom-enabled-themes '(doom-Iosvkem))
 '(custom-safe-themes
   '("990e24b406787568c592db2b853aa65ecc2dcd08146c0d22293259d400174e37" default))
 '(package-selected-packages
   '(## evil z3-mode which-key vterm use-package try smex slime racket-mode proof-general pdf-tools org-roam-server org-bullets olivetti minizinc-mode maude-mode magit lsp-java js2-mode jedi haskell-mode golden-ratio focus expand-region erlang doom-themes diff-hl define-word counsel-projectile company-coq clj-refactor auto-compile)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
 #+END_SRC
