#!/usr/bin/env ruby

# There used to be an option read_mailbox in the FB API, but they removed it in
# favour of their (paid) messenger API.
#
# TODO: friend birthdays, friend requests.
# TODO: Caching cookies.

# $XDEBUG = true

require 'yaml'
require 'stringio'

begin
  require 'capybara/poltergeist'
rescue
  abort 'Please run (sudo) gem install capybara poltergeist.'
end

begin
  config = YAML.load_file(File.expand_path('~/.config/private.yml'))['facebook']
rescue Errno::ENOENT
  abort('Please create ~/.config/private.yml file with facebook key.')
end

def debug(message)
  warn(message) if $XDEBUG
end

def shush(*streams)
  on_hold = streams.collect { |stream| stream.dup }
  streams.each do |stream|
    stream.reopen(RUBY_PLATFORM =~ /mswin/ ? 'NUL:' : '/dev/null')
    stream.sync = true
  end
  yield
ensure
  streams.each_with_index do |stream, i|
    stream.reopen(on_hold[i])
  end
end

def wait_for_page_change(browser)
  start_time = Time.now
  previous_path = browser.current_path

  until browser.current_path != previous_path do
    previous_path = browser.current_path
    sleep 0.1
  end

  debug "~ Took #{Time.now - start_time}s."
end

# Configure Poltergeist to not blow up on websites with js errors aka every website with js
# See more options at https://github.com/teampoltergeist/poltergeist#customization
Capybara.register_driver(:poltergeist) do |app|
  options = {
    js_errors: false,
    timeout: 50, #s
    phantomjs_options: ['--load-images=no', '--ignore-ssl-errors=yes']
  }
  Capybara::Poltergeist::Driver.new(app, options).tap do |driver|
    driver.headers = {
      'User-Agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36'
    }
  end
end

# Configure Capybara to use Poltergeist as the driver
Capybara.default_driver = :poltergeist

browser = Capybara.current_session

def login(browser, config)
  username = config['username'] || abort('Add facebook.username into your ~/.config/private.yml file.')
  password = config['password'] || abort('Add facebook.username into your ~/.config/private.yml file.')

  debug '~ Starting a browser.'
  shush(STDERR, STDOUT) { browser.visit('https://www.facebook.com/login') }
  browser.find('input[name="email"]').send_keys(username)
  debug '~ Logging in.'
  browser.find('input[name="pass"]').send_keys(password, :enter)
  wait_for_page_change(browser)
  debug '~ Logged in.'
  File.open('data/fb_cookies.yml', 'w') do |file|
    file.puts(browser.driver.cookies.to_yaml)
  end
end

begin
  cookies = YAML.load_file('data/fb_cookies.yml')
  debug '~ Resetting cookies.'
  cookies.each do |name, cookie|
    attrs = cookie.instance_variable_get(:@attributes).dup.tap { |attrs| attrs.delete('value') }
    browser.driver.set_cookie(name, cookie.value, attrs)
  end
  debug "~ Cookies: #{browser.driver.cookies.keys.inspect}"
  # ~ Cookies: ["datr", "sb", "c_user", "xs", "fr", "csm", "pl", "lu"] here
  # ~ Cookies: ["reg_fb_gate", "reg_fb_ref", "datr", "_js_reg_fb_ref", "fr"] after visits mesages
rescue Errno::ENOENT
  debug '~ Cookies are not saved, logging in.'
  login(browser, config)
end

# require 'pry'; binding.pry

shush(STDERR, STDOUT) { browser.visit('https://www.facebook.com/messages') }
debug "~ Cookies: #{browser.driver.cookies.keys.inspect}"

# Why doesn't it work?
if browser.current_path == '/login.php'
  login(browser, config)
  shush(STDERR, STDOUT) { browser.visit('https://www.facebook.com/messages') }
end

debug '~ Loading messages.'
# browser.save_screenshot(File.expand_path('~/Desktop/FB.png'))
unread_threads_elems = browser.find_all('[aria-label="Conversation list"] li[aria-live="polite"]')
unread_threads_elems.each do |element|
  link = element.find('a[role="link"]')['data-href']
  puts "#{element.text} | href=#{link}"
end
