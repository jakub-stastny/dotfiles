#!/usr/bin/env ruby

require 'yaml'
require 'term/ansicolor'

String.send(:include, Term::ANSIColor)

=begin
Synonyma (list the others not any of these, what's the other one you know?)
Switch sides (ask in EN or in ES) (and deal with synonyms again).
=end

begin
  path = File.expand_path('~/.config/flashcards.yml')
  FLASHCARDS_DATA = File.new(path)
rescue Errno::ENOENT
  File.open(path, 'w') { }
  retry
end

class Flashcard
  attr_reader :data
  def initialize(data)
    @data = data
    @data[:examples] ||= Array.new
    @data[:metadata] ||= Hash.new

    self.expression || raise(ArgumentError.new('Expression has to be provided!'))
    self.translation || raise(ArgumentError.new('Translation has to be provided!'))
  end

  [:expression, :translation, :hint, :examples, :metadata].each do |attribute|
    define_method(attribute) { @data[attribute] }
  end

  def data
    @data.dup.tap do |data|
      data.delete(:metadata) if :metadata.empty?
    end
  end

  def ==(anotherFlashcard)
    self.expression == anotherFlashcard.expression && self.translation == anotherFlashcard.translation
  end

  def remembered?
    (self.metadata[:correct_answers] || Array.new).length >= 3
  end

  def mark(reply)
    if self.translation == reply
      self.metadata[:correct_answers] ||= Array.new
      self.metadata[:correct_answers].push(Time.now)
      return true
    else
      self.metadata.clear # Treat as new.
      return false
    end
  end
end

def load_flashcards(data, language)
  data[language] ||= Array.new
  data[language].map { |flashcard_data| Flashcard.new(flashcard_data) }
end

def run(language, flashcards)
  puts "~ Testing your #{language} knowledge. Change system language to whatever language you want to practice.\n\n"

  # TODO: First test ones that has been tested before and needs refreshing before
  # they go to the long-term memory. Then test the new ones and finally the remembered ones.
  # Limit count of each.
  flashcards.shuffle.each do |flashcard|
    # TODO: also test remembered, but less so.
    next if flashcard.remembered?

    if synonyms = flashcards.select { |f2| flashcard.expression == f2.expression}
      print "#{flashcard.expression} (#{flashcard.hint || 'no hint'}): ".bold
    else
      print "#{flashcard.expression} (#{flashcard.hint || 'no hint'}) (not any of these: #{synonyms.map(&:expression).join(', ')}): ".bold
    end

    if flashcard.mark(STDIN.readline.chomp)
      puts "~ Well done! It is indeed '#{flashcard.translation.yellow.bold}'.".green.bold
      puts "~ Here are some examples:\n\n"
      flashcard.examples.each do |expression, translation|
        puts "  #{expression}".green, "  #{translation}".yellow, ''
      end
    else
      puts "~ It is in fact '#{flashcard.translation}'.".red
    end
  end
end

case ARGV.shift
  # flashcards add es 'Madre mia!' 'Oh my!'
when 'add', '+'
  unless ARGV.length == 3
    abort "Usage: #{$0} [lang] [word] [translation]"
  end

  data = YAML.load(FLASHCARDS_DATA.read) || Hash.new
  flashcards = load_flashcards(data, ARGV[0])

  unless flashcards.find { |flashcard| flashcard.expression == Flashcard.new(expression: ARGV[1], translation: ARGV[2]) }
    flashcards << Flashcard.new(expression: ARGV[1], translation: ARGV[2])

    data[ARGV[0]] = flashcards.map(&:data)

    FLASHCARDS_DATA.close
    yaml = data.to_yaml
    File.open(FLASHCARDS_DATA.path, 'w') { |file| file << yaml }
  else
    warn "~ #{ARGV[1]} is already defined." # TODO: add hint as ARGV[3]
  end
when '--help', '-h'
  puts DATA.read
when nil
  data = YAML.load(FLASHCARDS_DATA.read) || Hash.new
  flashcards = load_flashcards(data, ENV['LANG'][0..1])

  # Switch system language to whatever language you're learning.
  run(ENV['LANG'][0..1], flashcards)

  # Save metadata.
  data[ENV['LANG'][0..1]] = flashcards.map(&:data)

  FLASHCARDS_DATA.close
  yaml = data.to_yaml
  File.open(FLASHCARDS_DATA.path, 'w') { |file| file << yaml }
end

__END__
flashcards add [lang] [word] [translation]
flashcards add es todavÃ­a still

flashcards
