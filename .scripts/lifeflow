#!/usr/bin/env ruby

# 20 days, 1 hour a day.
MINUTES_MEDITATED_PER_RECORDING = 20 * 1 * 60

require 'yaml'
require 'timeout'
require 'refined-refinements/hour'
require 'refined-refinements/colours'
require 'refined-refinements/homepath'

using RR::ColouredTerminal

PATH = RR::Homepath.new('~/Dropbox/Data/Data/LifeFlow.yml')

data = begin
  hash = YAML.load_file(PATH.expand)
  hash.default_proc = Proc.new { |hash, key| hash[key] = Array.new }
  hash
rescue Errno::ENOENT
  Hash.new { |hash, key| hash[key] = Array.new }
end

def base_dir
  File.expand_path("~/Dropbox/Media/Meditation/Lifeflow")
end

def recordings
  Dir.glob("#{base_dir}/*.mp3").sort[1..-1].map(&File.method(:basename))
end

def find_recording(data, index = 0)
  recording = recordings[index]
  unless data[recording].values.sum / 60 >= MINUTES_MEDITATED_PER_RECORDING
    recording
  else
    find_recording(data, index + 1)
  end
end

def timeout_maybe(timeout, &block)
  timeout ? Timeout.timeout(timeout * 60, &block) : block.call
end

def play(path)
  path = RR::Homepath.new(path)
  puts "<bold>~</bold> <green>Playing</green> #{path}"
  timeout_maybe(ARGV.first && ARGV.shift.to_i) do
    system("afplay '#{path.expand}'")
  end
rescue Timeout::Error
  system("killall afplay") # Why doesn't it stop by itself?!?!
rescue Interrupt
  puts
end

case ARGV.shift
when 'play'
  recording = find_recording(data)

  unless recording
    abort "<bold>~</bold> Done! You can start using <green>LifeFlow 2.0 Bonus</green> now."
  end

  start_time = Time.now
  play(File.join(base_dir, recording))
  duration = Time.now - start_time

  if duration > 60
    data[recording][start_time] = duration.round
    data_string = data.to_yaml
    File.open(PATH.expand, 'w') do |file|
      file.puts(data_string)
    end

    puts "<bold>~</bold> Duration: <green>#{(duration / 60).round} minutes</green>."
    hours_meditated = Hour.new(0, (data[recording].values.sum + duration) / 60)
    total_hours = Hour.new(0, MINUTES_MEDITATED_PER_RECORDING)
    puts "<bold>~</bold> Meditated <green>#{hours_meditated}</green> hours out of <yellow>#{total_hours}</yellow> (<green>#{total_hours - hours_meditated}</green> left)."
  end
else
  abort DATA.read
end


__END__
lifeflow play    <bright_black># Play the whole current episode.</bright_black>
lifeflow play <yellow>25</yellow> <bright_black># Play the current episode for 25 minutes.</bright_black>
